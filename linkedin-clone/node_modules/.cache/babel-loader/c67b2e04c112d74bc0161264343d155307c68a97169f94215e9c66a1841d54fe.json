{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const userSlice = userSlice({\n  name: \"user\",\n  initialState: {\n    user: null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.value = action.payload;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    logout: state => {\n      state.user = null;\n    }\n  }\n});\nexport const {\n  login,\n  logout\n} = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = state => state.user.user;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","userSlice","name","user","reducers","login","state","action","payload","logout","actions","selectUser","reducer"],"sources":["/Users/simrank/Desktop/react/linkedin-clone/src/features/counter/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = userSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    \n    login: (state, action) => {\n      state.value =action.payload;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    logout: (state) => {\n      state.user =null;\n    },\n  },\n  \n});\n\nexport const { login, logout } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.user.user;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,UAAU,QAAQ,cAAc;AAEzC,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAAoB,EACpB,MAAOO,MAAM,IAAK;EAChB,MAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAM,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAMC,SAAS,GAAGA,SAAS,CAAC;EACjCC,IAAI,EAAE,MAAM;EACZR,YAAY,EAAE;IACZS,IAAI,EAAE;EACR,CAAC;EACD;EACAC,QAAQ,EAAE;IAERC,KAAK,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxBD,KAAK,CAACX,KAAK,GAAEY,MAAM,CAACC,OAAO;IAC7B,CAAC;IACD;IACAC,MAAM,EAAGH,KAAK,IAAK;MACjBA,KAAK,CAACH,IAAI,GAAE,IAAI;IAClB;EACF;AAEF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,KAAK;EAAEI;AAAO,CAAC,GAAGR,SAAS,CAACS,OAAO;;AAElD;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIL,KAAK,IAAKA,KAAK,CAACH,IAAI,CAACA,IAAI;;AAEpD;AACA;;AAGA,eAAeF,SAAS,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}