{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    logout: (state, action) => {\n      state.user = null;\n    }\n  }\n});\nexport const {\n  login,\n  logout\n} = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = state => state.user.user;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","userSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","reducer"],"sources":["/Users/simrank/Desktop/react/linkedin-clone/src/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    \n    login: (state, action) => {\n      state.user =action.payload;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    logout: (state, action) => {\n      state.user =null;\n    },\n  },\n  \n});\n\nexport const { login, logout } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.user.user;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAIhE,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;EACnCE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,IAAI,EAAE;EACR,CAAC;EACD;EACAC,QAAQ,EAAE;IAERC,KAAK,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxBD,KAAK,CAACH,IAAI,GAAEI,MAAM,CAACC,OAAO;IAC5B,CAAC;IACD;IACAC,MAAM,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACzBD,KAAK,CAACH,IAAI,GAAE,IAAI;IAClB;EACF;AAEF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,KAAK;EAAEI;AAAO,CAAC,GAAGT,SAAS,CAACU,OAAO;;AAElD;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIL,KAAK,IAAKA,KAAK,CAACH,IAAI,CAACA,IAAI;;AAEpD;AACA;;AAGA,eAAeH,SAAS,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}